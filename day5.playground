import UIKit

/*
 Day 5. Functions, Parameters and Errors
    Created by Gustavo Alex Vasquez
    Copyright Â© 2021 Alex Vasquez. All rights reserved.
 */

// 1. Writing Functions
func printHelp(){
    let message = """
    Welcome to my App
    This is my fifth day
    On the Course
    """
    
    print (message)
}

printHelp()

// 2. Accepting Parameters
func square(number: Int){
    print(number * number)
}

square(number: 8)

// 3. Returning Values
func product(numberA: Int, numberB : Int) -> Int {
    return numberA * numberB
}

product(numberA: 10, numberB: 4)

func getUser() -> (first: String, last: String){
    (first: "Taylor", last: "Swift")
}

let user = getUser()
print(user.last)

// 4. Parameters Labels
func sayHello(to name: String){
    print("Hello \(name)")
}

sayHello(to: "Alex")

// 5. Omitting Parameter Labels
func printAge(_ age: Int){
    print("My age is \(age)")
}

printAge(21)

// 6. Default Parameters
func greet(_ person: String, nicely: Bool = true){
    if nicely == true {
        print("Hello, \(person)")
    } else {
        print("Oh no, it's \(person) again...")
    }
}

greet("Taylor")
greet("Justin", nicely : false)

// 7. Variadic Functions
func squareKNumbers(numbers: Int...){
    for number in numbers {
        print("\(number) squared is \(number * number)")
    }
}

squareKNumbers(numbers : 1,2,3,4,5)

// 8. Writing Throwing Functions
enum PasswordError: Error{
    case obvious
}

func checkPassword(_ password: String) throws -> Bool {
    if password == "password"{
        throw PasswordError.obvious
    }
    
    return true
}

// 9. Running Throwing Functions
do {
    try checkPassword("password")
    print("That password is good!")
} catch {
    print("You can't use that password")
}

// 10. Inout Parameters
func sum(_ a: inout Int, _ b: Int) -> Int {
    a = a + 2
    return a + b
}

var first = 26
print(sum(&first, 8))
